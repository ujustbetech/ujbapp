{"version":3,"sources":["50-es5.js","webpack:///node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[50],{\n\n/***/ \"./node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js\":\n/*!************************************************************************!*\\\n  !*** ./node_modules/@ionic/core/dist/esm/ion-refresher_2-ios.entry.js ***!\n  \\************************************************************************/\n/*! exports provided: ion_refresher, ion_refresher_content */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_refresher\", function() { return Refresher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_refresher_content\", function() { return RefresherContent; });\n/* harmony import */ var _core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-feeeff0d.js */ \"./node_modules/@ionic/core/dist/esm/core-feeeff0d.js\");\n/* harmony import */ var _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-3c7f3790.js */ \"./node_modules/@ionic/core/dist/esm/config-3c7f3790.js\");\n/* harmony import */ var _index_3476b023_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-3476b023.js */ \"./node_modules/@ionic/core/dist/esm/index-3476b023.js\");\n\n\n\n\nconst Refresher = class {\n    constructor(hostRef) {\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionRefresh\", 7);\n        this.ionPull = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionPull\", 7);\n        this.ionStart = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionStart\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-refresher> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.gesture = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(null, /*! ./index-624eea58.js */ \"./node_modules/@ionic/core/dist/esm/index-624eea58.js\"))).createGesture({\n            el: contentEl,\n            gestureName: 'refresher',\n            gesturePriority: 10,\n            direction: 'y',\n            threshold: 20,\n            passive: false,\n            canStart: () => this.canStart(),\n            onStart: () => this.onStart(),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        this.close(32 /* Completing */, '120ms');\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        this.close(16 /* Cancelling */, '');\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    }\n    setCss(y, duration, overflowVisible, delay) {\n        this.appliedStyles = (y > 0);\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"w\"])(() => {\n            if (this.scrollEl) {\n                const style = this.scrollEl.style;\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    }\n    render() {\n        const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n        return (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-active': this.state !== 1 /* Inactive */,\n                'refresher-pulling': this.state === 2 /* Pulling */,\n                'refresher-ready': this.state === 4 /* Ready */,\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\n                'refresher-completing': this.state === 32 /* Completing */\n            } }));\n    }\n    get el() { return Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"e\"])(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; }\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"].get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n            this.refreshingSpinner = _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"].get('refreshingSpinner', _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"].get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        return (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { class: Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this) }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n            Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-pulling-icon\" }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n            Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-pulling-text\", innerHTML: Object(_index_3476b023_js__WEBPACK_IMPORTED_MODULE_2__[\"s\"])(this.pullingText) })), Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n            Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-refreshing-icon\" }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n            Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"refresher-refreshing-text\", innerHTML: Object(_index_3476b023_js__WEBPACK_IMPORTED_MODULE_2__[\"s\"])(this.refreshingText) }))));\n    }\n};\n\n\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=50-es2015.js.map","import { r as registerInstance, d as createEvent, w as writeTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nconst Refresher = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.appliedStyles = false;\n        this.didStart = false;\n        this.progress = 0;\n        /**\n         * The current state which the refresher is in. The refresher's states include:\n         *\n         * - `inactive` - The refresher is not being pulled down or refreshing and is currently hidden.\n         * - `pulling` - The user is actively pulling down the refresher, but has not reached the point yet that if the user lets go, it'll refresh.\n         * - `cancelling` - The user pulled down the refresher and let go, but did not pull down far enough to kick off the `refreshing` state. After letting go, the refresher is in the `cancelling` state while it is closing, and will go back to the `inactive` state once closed.\n         * - `ready` - The user has pulled down the refresher far enough that if they let go, it'll begin the `refreshing` state.\n         * - `refreshing` - The refresher is actively waiting on the async operation to end. Once the refresh handler calls `complete()` it will begin the `completing` state.\n         * - `completing` - The `refreshing` state has finished and the refresher is in the way of closing itself. Once closed, the refresher will go back to the `inactive` state.\n         */\n        this.state = 1 /* Inactive */;\n        /**\n         * The minimum distance the user must pull down until the\n         * refresher will go into the `refreshing` state.\n         */\n        this.pullMin = 60;\n        /**\n         * The maximum distance of the pull until the refresher\n         * will automatically go into the `refreshing` state.\n         * Defaults to the result of `pullMin + 60`.\n         */\n        this.pullMax = this.pullMin + 60;\n        /**\n         * Time it takes to close the refresher.\n         */\n        this.closeDuration = '280ms';\n        /**\n         * Time it takes the refresher to to snap back to the `refreshing` state.\n         */\n        this.snapbackDuration = '280ms';\n        /**\n         * How much to multiply the pull speed by. To slow the pull animation down,\n         * pass a number less than `1`. To speed up the pull, pass a number greater\n         * than `1`. The default value is `1` which is equal to the speed of the cursor.\n         * If a negative value is passed in, the factor will be `1` instead.\n         *\n         * For example: If the value passed is `1.2` and the content is dragged by\n         * `10` pixels, instead of `10` pixels the content will be pulled by `12` pixels\n         * (an increase of 20 percent). If the value passed is `0.8`, the dragged amount\n         * will be `8` pixels, less than the amount the cursor has moved.\n         */\n        this.pullFactor = 1;\n        /**\n         * If `true`, the refresher will be hidden.\n         */\n        this.disabled = false;\n        this.ionRefresh = createEvent(this, \"ionRefresh\", 7);\n        this.ionPull = createEvent(this, \"ionPull\", 7);\n        this.ionStart = createEvent(this, \"ionStart\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.disabled);\n        }\n    }\n    async connectedCallback() {\n        if (this.el.getAttribute('slot') !== 'fixed') {\n            console.error('Make sure you use: <ion-refresher slot=\"fixed\">');\n            return;\n        }\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-refresher> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.gesture = (await import('./index-624eea58.js')).createGesture({\n            el: contentEl,\n            gestureName: 'refresher',\n            gesturePriority: 10,\n            direction: 'y',\n            threshold: 20,\n            passive: false,\n            canStart: () => this.canStart(),\n            onStart: () => this.onStart(),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Call `complete()` when your async operation has completed.\n     * For example, the `refreshing` state is while the app is performing\n     * an asynchronous operation, such as receiving more data from an\n     * AJAX request. Once the data has been received, you then call this\n     * method to signify that the refreshing has completed and to close\n     * the refresher. This method also changes the refresher's state from\n     * `refreshing` to `completing`.\n     */\n    async complete() {\n        this.close(32 /* Completing */, '120ms');\n    }\n    /**\n     * Changes the refresher's state from `refreshing` to `cancelling`.\n     */\n    async cancel() {\n        this.close(16 /* Cancelling */, '');\n    }\n    /**\n     * A number representing how far down the user has pulled.\n     * The number `0` represents the user hasn't pulled down at all. The\n     * number `1`, and anything greater than `1`, represents that the user\n     * has pulled far enough down that when they let go then the refresh will\n     * happen. If they let go and the number is less than `1`, then the\n     * refresh will not happen, and the content will return to it's original\n     * position.\n     */\n    getProgress() {\n        return Promise.resolve(this.progress);\n    }\n    canStart() {\n        if (!this.scrollEl) {\n            return false;\n        }\n        if (this.state !== 1 /* Inactive */) {\n            return false;\n        }\n        // if the scrollTop is greater than zero then it's\n        // not possible to pull the content down yet\n        if (this.scrollEl.scrollTop > 0) {\n            return false;\n        }\n        return true;\n    }\n    onStart() {\n        this.progress = 0;\n        this.state = 1 /* Inactive */;\n    }\n    onMove(detail) {\n        if (!this.scrollEl) {\n            return;\n        }\n        // this method can get called like a bazillion times per second,\n        // so it's built to be as efficient as possible, and does its\n        // best to do any DOM read/writes only when absolutely necessary\n        // if multi-touch then get out immediately\n        const ev = detail.event;\n        if (ev.touches && ev.touches.length > 1) {\n            return;\n        }\n        // do nothing if it's actively refreshing\n        // or it's in the way of closing\n        // or this was never a startY\n        if ((this.state & 56 /* _BUSY_ */) !== 0) {\n            return;\n        }\n        const pullFactor = (Number.isNaN(this.pullFactor) || this.pullFactor < 0) ? 1 : this.pullFactor;\n        const deltaY = detail.deltaY * pullFactor;\n        // don't bother if they're scrolling up\n        // and have not already started dragging\n        if (deltaY <= 0) {\n            // the current Y is higher than the starting Y\n            // so they scrolled up enough to be ignored\n            this.progress = 0;\n            this.state = 1 /* Inactive */;\n            if (this.appliedStyles) {\n                // reset the styles only if they were applied\n                this.setCss(0, '', false, '');\n                return;\n            }\n            return;\n        }\n        if (this.state === 1 /* Inactive */) {\n            // this refresh is not already actively pulling down\n            // get the content's scrollTop\n            const scrollHostScrollTop = this.scrollEl.scrollTop;\n            // if the scrollTop is greater than zero then it's\n            // not possible to pull the content down yet\n            if (scrollHostScrollTop > 0) {\n                this.progress = 0;\n                return;\n            }\n            // content scrolled all the way to the top, and dragging down\n            this.state = 2 /* Pulling */;\n        }\n        // prevent native scroll events\n        if (ev.cancelable) {\n            ev.preventDefault();\n        }\n        // the refresher is actively pulling at this point\n        // move the scroll element within the content element\n        this.setCss(deltaY, '0ms', true, '');\n        if (deltaY === 0) {\n            // don't continue if there's no delta yet\n            this.progress = 0;\n            return;\n        }\n        const pullMin = this.pullMin;\n        // set pull progress\n        this.progress = deltaY / pullMin;\n        // emit \"start\" if it hasn't started yet\n        if (!this.didStart) {\n            this.didStart = true;\n            this.ionStart.emit();\n        }\n        // emit \"pulling\" on every move\n        this.ionPull.emit();\n        // do nothing if the delta is less than the pull threshold\n        if (deltaY < pullMin) {\n            // ensure it stays in the pulling state, cuz its not ready yet\n            this.state = 2 /* Pulling */;\n            return;\n        }\n        if (deltaY > this.pullMax) {\n            // they pulled farther than the max, so kick off the refresh\n            this.beginRefresh();\n            return;\n        }\n        // pulled farther than the pull min!!\n        // it is now in the `ready` state!!\n        // if they let go then it'll refresh, kerpow!!\n        this.state = 4 /* Ready */;\n        return;\n    }\n    onEnd() {\n        // only run in a zone when absolutely necessary\n        if (this.state === 4 /* Ready */) {\n            // they pulled down far enough, so it's ready to refresh\n            this.beginRefresh();\n        }\n        else if (this.state === 2 /* Pulling */) {\n            // they were pulling down, but didn't pull down far enough\n            // set the content back to it's original location\n            // and close the refresher\n            // set that the refresh is actively cancelling\n            this.cancel();\n        }\n    }\n    beginRefresh() {\n        // assumes we're already back in a zone\n        // they pulled down far enough, so it's ready to refresh\n        this.state = 8 /* Refreshing */;\n        // place the content in a hangout position while it thinks\n        this.setCss(this.pullMin, this.snapbackDuration, true, '');\n        // emit \"refresh\" because it was pulled down far enough\n        // and they let go to begin refreshing\n        this.ionRefresh.emit({\n            complete: this.complete.bind(this)\n        });\n    }\n    close(state, delay) {\n        // create fallback timer incase something goes wrong with transitionEnd event\n        setTimeout(() => {\n            this.state = 1 /* Inactive */;\n            this.progress = 0;\n            this.didStart = false;\n            this.setCss(0, '0ms', false, '');\n        }, 600);\n        // reset set the styles on the scroll element\n        // set that the refresh is actively cancelling/completing\n        this.state = state;\n        this.setCss(0, this.closeDuration, true, delay);\n        // TODO: stop gesture\n    }\n    setCss(y, duration, overflowVisible, delay) {\n        this.appliedStyles = (y > 0);\n        writeTask(() => {\n            if (this.scrollEl) {\n                const style = this.scrollEl.style;\n                style.transform = ((y > 0) ? `translateY(${y}px) translateZ(0px)` : 'translateZ(0px)');\n                style.transitionDuration = duration;\n                style.transitionDelay = delay;\n                style.overflow = (overflowVisible ? 'hidden' : '');\n            }\n        });\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { slot: \"fixed\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`refresher-${mode}`]: true,\n                'refresher-active': this.state !== 1 /* Inactive */,\n                'refresher-pulling': this.state === 2 /* Pulling */,\n                'refresher-ready': this.state === 4 /* Ready */,\n                'refresher-refreshing': this.state === 8 /* Refreshing */,\n                'refresher-cancelling': this.state === 16 /* Cancelling */,\n                'refresher-completing': this.state === 32 /* Completing */\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-refresher{left:0;top:0;display:none;position:absolute;width:100%;height:60px;z-index:-1}:host-context([dir=rtl]) ion-refresher,[dir=rtl] ion-refresher{left:unset;right:unset;right:0}ion-refresher.refresher-active{display:block}ion-refresher-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;height:100%}.refresher-pulling,.refresher-refreshing{display:none;width:100%}.refresher-pulling-icon,.refresher-refreshing-icon{-webkit-transform-origin:center;transform-origin:center;-webkit-transition:.2s;transition:.2s;font-size:30px;text-align:center}:host-context([dir=rtl]) .refresher-pulling-icon,:host-context([dir=rtl]) .refresher-refreshing-icon,[dir=rtl] .refresher-pulling-icon,[dir=rtl] .refresher-refreshing-icon{-webkit-transform-origin:calc(100% - center);transform-origin:calc(100% - center)}.refresher-pulling-text,.refresher-refreshing-text{font-size:16px;text-align:center}.refresher-pulling ion-refresher-content .refresher-pulling,.refresher-ready ion-refresher-content .refresher-pulling{display:block}.refresher-ready ion-refresher-content .refresher-pulling-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.refresher-cancelling ion-refresher-content .refresher-pulling,.refresher-refreshing ion-refresher-content .refresher-refreshing{display:block}.refresher-cancelling ion-refresher-content .refresher-pulling-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-completing ion-refresher-content .refresher-refreshing{display:block}.refresher-completing ion-refresher-content .refresher-refreshing-icon{-webkit-transform:scale(0);transform:scale(0)}.refresher-ios .refresher-pulling-icon,.refresher-ios .refresher-pulling-text,.refresher-ios .refresher-refreshing-icon,.refresher-ios .refresher-refreshing-text{color:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-crescent circle,.refresher-ios .refresher-refreshing .spinner-lines-ios line,.refresher-ios .refresher-refreshing .spinner-lines-small-ios line{stroke:var(--ion-text-color,#000)}.refresher-ios .refresher-refreshing .spinner-bubbles circle,.refresher-ios .refresher-refreshing .spinner-circles circle,.refresher-ios .refresher-refreshing .spinner-dots circle{fill:var(--ion-text-color,#000)}\"; }\n};\n\nconst RefresherContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            this.pullingIcon = config.get('refreshingIcon', 'arrow-down');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"div\", { class: \"refresher-pulling\" }, this.pullingIcon &&\n            h(\"div\", { class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { icon: this.pullingIcon, lazy: false })), this.pullingText &&\n            h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(this.pullingText) })), h(\"div\", { class: \"refresher-refreshing\" }, this.refreshingSpinner &&\n            h(\"div\", { class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { name: this.refreshingSpinner })), this.refreshingText &&\n            h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(this.refreshingText) }))));\n    }\n};\n\nexport { Refresher as ion_refresher, RefresherContent as ion_refresher_content };\n"]}