{"version":3,"sources":["28-es5.js","webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[28],{\n\n/***/ \"./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js\":\n/*!*****************************************************************************!*\\\n  !*** ./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js ***!\n  \\*****************************************************************************/\n/*! exports provided: ion_infinite_scroll, ion_infinite_scroll_content */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_infinite_scroll\", function() { return InfiniteScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_infinite_scroll_content\", function() { return InfiniteScrollContent; });\n/* harmony import */ var _core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core-feeeff0d.js */ \"./node_modules/@ionic/core/dist/esm/core-feeeff0d.js\");\n/* harmony import */ var _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config-3c7f3790.js */ \"./node_modules/@ionic/core/dist/esm/config-3c7f3790.js\");\n/* harmony import */ var _index_3476b023_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-3476b023.js */ \"./node_modules/@ionic/core/dist/esm/index-3476b023.js\");\n\n\n\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"w\"])(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"f\"])(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"w\"])(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n        const disabled = this.disabled;\n        return (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"e\"])(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; }\n};\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n            this.loadingSpinner = _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"].get('infiniteLoadingSpinner', _config_3c7f3790_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"].get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"c\"])(this);\n        return (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading-spinner\" }, Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (Object(_core_feeeff0d_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading-text\", innerHTML: Object(_index_3476b023_js__WEBPACK_IMPORTED_MODULE_2__[\"s\"])(this.loadingText) })))));\n    }\n    static get style() { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; }\n};\n\n\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=28-es2015.js.map","import { r as registerInstance, d as createEvent, w as writeTask, f as readTask, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; }\n};\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n    static get style() { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; }\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"]}